# config
spring.security.enable-csrf=false
#spring.cloud.config.enabled=false
#x-glp-response-format=glp-v2

config.home=""
validate.schema=false

crosscutting.context.path=/crosscutting

# user authorities
user.authorities=Instructor,Learner
user.authority=Instructor
user.authority.learner=Learner

glp.core.validation.enabled=false
glp.core.validation.isc-sync.enabled=true
glp.core.validation.isc-async.enabled=true
glp.core.validation.rest-context.enabled=false

disable.uri=/lad/health,/lad/ready,/lad/metrics
instructor.access.uri=/lad/v2/learningExperiences/*
learner.access.uri=/resource/v2/*

errorUserDesc.401=The request made to a resource requires valid authentication.

# Couchbase
#database=${DATABASE_TYPE}
#couchbaseserver.bucketName=${COUCHBASE_SERVER_BUCKETNAME}
#couchbaseserver.bucketPassword=
#couchbaseserver.hostNames=${COUCHBASE_SERVER_HOSTNAME}
#couchbaseserver.cluster.username=${CLUSTER_USERNAME}
#couchbaseserver.cluster.password=${CLUSTER_PASSWORD}


#database=COUCHBASESERVER
#couchbaseserver.bucketName=cross
#couchbaseserver.bucketPassword=
#couchbaseserver.hostNames=cb-cluster2-qa.glp-internal.com:8091
#couchbaseserver.cluster.username=cb-user
#couchbaseserver.cluster.password=cb-user
#couchbase-env-config.management-timeout=10000

glp.core.data.couchbase.enabled=true
glp.core.data.couchbase.bucket=crosscutting
couchbaseserver.bucketPassword=
glp.core.data.couchbase.hosts=${COUCHBASE_SERVER_HOSTNAME}
glp.core.data.couchbase.username=${CLUSTER_USERNAME}
glp.core.data.couchbase.password=${CLUSTER_PASSWORD}

isc.saga.timeout.fixedDelay=604800000

#See CouchbaseConfiguration for more options
couchbase-env-config.enabled=false

#spring.cloud.discovery.client.health-indicator.enabled=false
#spring.cloud.consul.discovery.enabled=true
#spring.cloud.consul.discovery.register=false
# Automatically create views and indexes by "@ViewIndexed", "@N1qlPrimaryIndexed","@N1qlSecondaryIndexed".
spring.data.couchbase.auto-index=true

server.port=${SERVER_PORT:9140}

# logging
logging.level.root=ERROR
logging.level.org.springframework.web=ERROR
logging.level.com.pearson=ERROR
logging.level.request_trace=ERROR
logging.file-path=${LOG_FILE_PATH}

# configuration of distributed tracing
#spring.zipkin.service.name=GLPv2-Crosscutting
#spring.zipkin.sender.type=web
#spring.zipkin.baseUrl=http://zipkin:9411/
spring.sleuth.sampler.probability=1.0
spring.sleuth.web.client.enabled=false
spring.sleuth.http.legacy.enabled=false
glp.core.distributed-tracing.exception.size=2000
spring.sleuth.async.configurer.enabled=false
#spring.profiles.active=Development
spring.sleuth.enabled=false
### ISC Configuration ###
event.type.list=MyEventName1,MyEventName2
isc.saga.timeout.fixedDelay=300000

#### Common Kafka Properties ###
bootstrap.servers=${ISC_KAFKA_PORT:localhost:9092}

### ConsumerConfiguration.properties ###
group.id=${KAFKA_GROUP_ID:SAMPLE_APP}
enable.auto.commit=true
auto.commit.interval.ms=1000
session.timeout.ms=30000
key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
poll.interval=1000

### ProducerConfiguration.properties ###
acks=all
retries=0
batch.size=10
linger.ms=1
key.serializer=org.apache.kafka.common.serialization.StringSerializer
value.serializer=org.apache.kafka.common.serialization.StringSerializer

### ZookeeperConfiguration.properties ###
zookeeper.hosts=${ISC_ZOOKEEPER_PORT:localhost:2181}
session.time.out.in.ms=15000
connection.time.out.in.ms=10000
no.of.partitions=1
no.of.replication=1

#### Metrics Configuration.properties #########
management.endpoint.metrics.enabled=false
management.endpoint.prometheus.enabled=false
management.metrics.export.prometheus.enabled=false

management.endpoint.health.enabled=false
management.endpoints.web.exposure.include=health,ready,metrics
management.endpoints.web.base-path=/crosscutting

### OAuth2
### see feature.oauth2.enabled
oauth2.server.url=https://glp-perf.gl-poc.com/iamsi/v1/oauth/token
oauth2.request.grant.type=?grant_type=password&username=
oauth2.grant.type=&password=
oauth2.user=_p943igrKDVp1vqsKlzVn0zdECpac6DXwXUiYJeYaz_jgGLQEYX_ez9QqSMCpWfH
oauth2.cred=sG3yUKQXGeBx7_d99AKz1g==
system.client.id=e5U8gMi2hU1QCyhB3n6NkA==
system.secret.id=qwk31yqBybvpZSTNuI0KPw==
oauth2.token.expiry.alert=60
oauth2.token.refresh.rate=60000
cred=1RsBnI0xfXGaIabpJO7zaQ==

glp.response.format=

### Features
feature.oauth2.enabled=false
feature.security.enabled=false

# Validation messages
NotEmpty.user.id=User id cannot be blank or null
NotNull.user.firstname=First name cannot be blank or null
Max.user.activeminutes=Active minutes must be less than 20
NotEmpty.address.streetname=Streetname cannot be blank or null

#neptune.address =glp2-nf2-1-glp1-us-east-2-glp2-nf2-nft-db01.cg26gy8jko7o.us-east-2.neptune.amazonaws.com
neptune.address =nf2-non-encrypted.cg26gy8jko7o.us-east-2.neptune.amazonaws.com
neptune.port = 8182
neptune.maxContentLength = 12345678
neptune.maxSimultaneousUsagePerConnection=32
neptune.minSimultaneousUsagePerConnection=1
neptune.maxInProcessPerConnection=32
neptune.nioPoolSize=1
neptune.maxConnectionPoolSize=32
neptune.security.enabled=false
#neptune.minConnectionPoolSize=32

spring.cloud.stream.kafka.binder.brokers=${ISC_KAFKA_PORT}

# Enable response compression
server.compression.enabled=true

# The comma-separated list of mime types that should be compressed
server.compression.mime-types=text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json

# Compress the response only if the response size is at least 1KB
server.compression.min-response-size=1024
